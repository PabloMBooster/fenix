xlim2[1] <- xlim2[1] + (n_perfil-1)*(-space_perfil)
}
par(mar = c(2,2,0.1,0.1), oma = c(2,2,2,2))
plot(NA, xlim = xlim2, ylim = ylim, axes = FALSE, xlab = xlab, ylab = ylab, add = add1)
polygon(x = c(linePeru$lon[1], -50, -50, linePeru$lon[23513:2], linePeru$lon[1]),
y = c(linePeru$lat[1], -24, 0, linePeru$lat[23513:2], linePeru$lat[1]),
col = land.col)
# map("worldHires", fill=TRUE, col = land.col, add = TRUE,
#     xlim = xlim, ylim = ylim, border = border.map)
box()
lines(linePeru$lon, linePeru$lat, col = "gray40")
if(n_perfil > 1){
for(i in 2:n_perfil){
lines(linePeru$lon + (i-1)*-3, linePeru$lat, col="gray40")
}
}
principalP = puertosPeru[c(2,4,5,7,8,10,12,14,16,17,19),]
text(principalP$lon, principalP$lat, labels = principalP$puertos, pos=4,
col = col_harbor, cex = cex_harbor, font = font_harbor)
axis(2,seq(ylim[1],ylim[2],by = 2), axis.Lat, las=1, cex.axis=cex_axis, hadj=0.5, tck=-0.010)
if(n_perfil == 1){
axis(1,seq(xlim[1],xlim[2],by = 2), tck=-0.01, labels = NA, hadj=0.5)
axis(1,seq(xlim[1],xlim[2],by = 2), labels = axis.Lon, cex.axis=cex_axis, line = -0.8, lwd = 0)
}
if(isTRUE(area_iso)){
if(!is.null(name_area_iso)){
lonlat_areaIso <- lonlat_areaIso[lonlat_areaIso$area %in% name_area_iso,]
}
addIsopara(dataIsopara = lonlat_areaIso, ylim = c(-21, -3))
#lines(linePeru$lon, linePeru$lat, col = "gray40")
}
}
#
# load("C:/pablo/D/github/tasaR/data/AIPData_new.RData")
# load("C:/pablo/D/github/tasaR/data/AIPData_old.RData")
# #
# head(AIPData_old)
# head(AIPData_new)
#mapa_peru(area_iso = T, name_area_iso = c(12180, 13180))
mapa_peru()
mapa_peru2()
mapa_peru(n_perfil = 3, area_iso = T)
mapa_peru(area_iso = T)
plot(NA, xlim = xlim2, ylim = ylim, axes = FALSE, xlab = xlab, ylab = ylab, add = add1)
polygon(x = c(linePeru$lon[1], -50, -50, linePeru$lon[23513:2], linePeru$lon[1]),
y = c(linePeru$lat[1], -24, 0, linePeru$lat[23513:2], linePeru$lat[1]),
col = land.col)
mapa_peru <- function(xlim=c(-86,-70), ylim=c(-21, -3), xlab = "", ylab = "",
cex_axis = 1, cex_harbor = 1, col_harbor = 1, font_harbor = 2,
land.col="khaki1", border.map = "khaki1", add1 = FALSE,
n_perfil = 1, space_perfil = 3,
area_iso = FALSE, name_area_iso = NULL){
require(maps)
require(mapdata)
options(warn=-1)
x11()
axis.Lon <- paste(abs(seq(xlim[1],xlim[2],by = 2)),"°W")
axis.Lat <- paste(abs(seq(ylim[1],ylim[2],by = 2)),"°S")
Encoding(axis.Lon) <- "UTF-8"
Encoding(axis.Lat) <- "UTF-8"
xlim2 <- xlim
if(n_perfil > 1){
xlim2[1] <- xlim2[1] + (n_perfil-1)*(-space_perfil)
}
par(mar = c(2,2,0.1,0.1), oma = c(2,2,2,2))
plot(NA, xlim = xlim2, ylim = ylim, axes = FALSE, xlab = xlab, ylab = ylab, add = add1)
polygon(x = c(linePeru$lon[1], -50, -50, linePeru$lon[23513:2], linePeru$lon[1]),
y = c(linePeru$lat[1], -24, 0, linePeru$lat[23513:2], linePeru$lat[1]),
col = land.col)
# map("worldHires", fill=TRUE, col = land.col, add = TRUE,
#     xlim = xlim, ylim = ylim, border = border.map)
box()
lines(linePeru$lon, linePeru$lat, col = "gray40")
if(n_perfil > 1){
for(i in 2:n_perfil){
lines(linePeru$lon + (i-1)*-3, linePeru$lat, col="gray40")
}
}
principalP = puertosPeru[c(2,4,5,7,8,10,12,14,16,17,19),]
text(principalP$lon, principalP$lat, labels = principalP$puertos, pos=4,
col = col_harbor, cex = cex_harbor, font = font_harbor)
axis(2,seq(ylim[1],ylim[2],by = 2), axis.Lat, las=1, cex.axis=cex_axis, hadj=0.5, tck=-0.010)
if(n_perfil == 1){
axis(1,seq(xlim[1],xlim[2],by = 2), tck=-0.01, labels = NA, hadj=0.5)
axis(1,seq(xlim[1],xlim[2],by = 2), labels = axis.Lon, cex.axis=cex_axis, line = -0.8, lwd = 0)
}
if(isTRUE(area_iso)){
if(!is.null(name_area_iso)){
lonlat_areaIso <- lonlat_areaIso[lonlat_areaIso$area %in% name_area_iso,]
}
addIsopara(dataIsopara = lonlat_areaIso, ylim = c(-21, -3))
lines(linePeru$lon, linePeru$lat, col = "gray40")
}
}
#
# load("C:/pablo/D/github/tasaR/data/AIPData_new.RData")
# load("C:/pablo/D/github/tasaR/data/AIPData_old.RData")
# #
# head(AIPData_old)
# head(AIPData_new)
#mapa_peru(area_iso = T, name_area_iso = c(12180, 13180))
mapa_peru(area_iso = T)
mapa_peru(area_iso = T)
library(fenix)
# Sample (Peruvian anchovy)
sample_frequency <- c(0,0,0,0,0,0,0,0,0,2,7,14,22,15,13,12,17,22,35,28,7,4,1,0,0,0,0,0,0,0,0)
length <- seq(5,20, by = 0.5)
# identify groups
view_modas <- modas(matrix(sample_frequency, nrow = 1), Lmin = 5, Lmax = 20, dL = 0.5, umbral = 10)
view_modas
# weighted
catch_frequency = weighted_frequency(length = length, frequency = sample_frequency, a = 0.003925, b = 3.2178, catch =  50000)
plot(length, catch_frequency, type = "l", lwd = 2, ylab = "Catch (number of individuals)", xlab = "Length (cm)")
out_cohortes = Bhattacharya(x = catch_frequency, groups = num_modas)
num_modas
# number of groups
num_modas = apply(view_modas, 1, unique_modas)
num_modas
# bhattacharya
out_cohortes = Bhattacharya(x = catch_frequency, groups = num_modas)
cohortes <- NULL
for(i in 1:length(out_cohortes$tableBhatt$Population)){
N = out_cohortes$tableBhatt$Population[i]
L = out_cohortes$tableBhatt$Mean[i]
S = out_cohortes$outL$sigma[i]
cohortei = cohort_to_length(cohort = c(N, L, S), lower = 5, upper = 20)
cohortes = rbind(cohortes, cohortei)
}
# plots
plot(length, catch_frequency, type = "l", lwd = 2, ylab = "Catch (number of individuals)", xlab = "Length (cm)")
lines(length, cohortes[1,], col = 2, lty = 2)
lines(length, cohortes[2,], col = 2, lty = 2)
length <- seq(5,20, by = 0.5)
length
num_modas
num_modas
view_modas
sort(view_modas[!is.na(view_modas)])
# Fenix :: Bhattacharya
# res_modas = fenix::Bhattacharya(vector_m, seq(2,20,0.5), mu = c(data2[i,]$moda_N1, data2[i,]$moda_N2 ))
# Mixdist :: mix
dfPars = data.frame(pi = c(0.5, 0.5), mu = sort(view_modas[!is.na(view_modas)]), sigma = c(2,3))
dfPars
sample_frequency
df = data.frame(legnth = seq(2,20,0.5), freq = sample_frequency)
df = data.frame(legnth = seq(5,20,0.5), freq = sample_frequency)
# Fenix :: Bhattacharya
# res_modas = fenix::Bhattacharya(vector_m, seq(2,20,0.5), mu = c(data2[i,]$moda_N1, data2[i,]$moda_N2 ))
# Mixdist :: mix
dfPars = data.frame(pi = c(0.5, 0.5), mu = sort(view_modas[!is.na(view_modas)]), sigma = c(2,3))
require(mixdist)
dfPars = data.frame(pi = c(0.5, 0.5), mu = sort(view_modas[!is.na(view_modas)]), sigma = c(2,3))
df = data.frame(legnth = seq(5,20,0.5), freq = sample_frequency)
fit1 = mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
fitted(fit1)
plot(fit1)
fitted(fit1)
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
is.null(res_modas2)
plot(length, sample_frequency,  type = "l", lwd = 3 , col = 3, xaxt = "n" ); axis(1,length)
tb = data.frame(modas = sort(view_modas[!is.na(view_modas)]),
freq = c(max(sample_frequency), max(sample_frequency[sample_frequency != max(sample_frequency)])))
points(tb$modas, tb$freq, col = 2, pch = 6, cex = 1.5)
legend("topleft", legend = c(data2[i,]$moda_N1, data2[i,]$moda_N2)  , inset = 0.009, box.lty = 0, bg = NULL, y.intersp = 0.2)
lines( length, res_modas2[,1]/1000000, type = "l", lty = 1, lwd = 1 , col = 2)
lines( length, res_modas2[,2]/1000000, type = "l", lty = 1, lwd = 1 , col = 2)
lines( length,  rowSums(res_modas2)/1000000, type = "l", lty = 1, lwd = 1 , col = 4)
res_modas2
plot(res_modas2[,1])
plot(res_modas2[,1], type = "l")
lines(res_modas2[,2], type = "l")
plot(apply(res_modas2,1,sum), type = "l", lwd = 2, col = 2)
lines(res_modas2[,1], col = 3, lwd = 2)
lines(res_modas2[,2], col = 3, lwd = 2)
lines(apply(res_modas2,1,sum))
lines(sample_frequency, col = 4)
plot(res_modas2 )
sum(res_modas2)
sum(sample_frequency)
fit1 = mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
out_cohortes
out_cohortes
outL =
mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
outL$parameters
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Population = population)
tableBhatt
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
tableBhatt
plot(outL, which = 2)
plot(fit1)
res_modas2
cohortes <- data.frame(res_modas2)
head(cohortes)
paste0("cohor",1:ncol(cohortes))
separar_modas <- function(x, length_class = seq(5, 20, by = 0.5), groups, mu = NULL, maxit = 5000, plot = T){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
sigma  = rep(2, length(groups))
dfPars = data.frame(pi = c(0.5, 0.5), mu = mu, sigma = sigma)
df     = data.frame(legnth = length_class), freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
}, error=function(e) {
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(plot = T){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
x
length_class = seq(5, 20, by = 0.5)
separar_modas <- function(x, length_class = seq(5, 20, by = 0.5), groups, mu = NULL, maxit = 5000, plot = T){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
sigma  = rep(2, length(groups))
dfPars = data.frame(pi = c(0.5, 0.5), mu = mu, sigma = sigma)
df     = data.frame(legnth = length_class), freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
}, error=function(e) {
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(plot = T){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
separar_modas <- function(x, length_class = seq(5, 20, by = 0.5), groups, mu = NULL, maxit = 5000, plot = T){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
sigma  = rep(2, length(groups))
dfPars = data.frame(pi = c(0.5, 0.5), mu = mu, sigma = sigma)
df     = data.frame(legnth = length_class), freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
}, error=function(e) {
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(isTRUE(plot)){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
sigma  = rep(2, length(groups))
groups = 2
sigma  = rep(2, length(groups))
dfPars = data.frame(pi = c(0.5, 0.5), mu = mu, sigma = sigma)
data(pikepar)
fitpike1 <- mix(pike65, pikepar, "lnorm", constr = mixconstr(consigma = "CCV"), emsteps = 3)
data(pike65)
data(pikepar)
fitpike1 <- mix(pike65, pikepar, "lnorm", constr = mixconstr(consigma = "CCV"), emsteps = 3)
plot(fitpike1)
fitpike1$parameters
pikepar
length(groups)
groups
2+groups
seq(2, 2+groups-1, by = 1)
1/groups
rep(1/groups, groups)
groups = 4
rep(1/groups, groups)
groups = 3
rep(1/groups, groups)
round(rep(1/groups, groups),2)
0.33+0.33+0.33
sigma  = seq(2, 2+groups-1, by = 1)
pi     = rep(1/groups, groups)
dfPars = data.frame(pi = pi, mu = mu, sigma = sigma)
dfPars
x
separar_modas <- function(x, length_class = seq(5, 20, by = 0.5), groups, mu = mu, maxit = 5000, plot = T){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
sigma  = seq(2, 2+groups-1, by = 1)
pi     = rep(1/groups, groups)
dfPars = data.frame(pi = pi, mu = mu, sigma = sigma)
df     = data.frame(legnth = length_class), freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
}, error=function(e) {
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(isTRUE(plot)){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
#
# fit1 = mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
# res_modas2 = fitted(fit1)
# res_modas2 = res_modas2$joint
# plot(apply(res_modas2,1,sum), type = "l", lwd = 2, col = 2)
# lines(res_modas2[,1], col = 3, lwd = 2)
# lines(res_modas2[,2], col = 3, lwd = 2)
# lines(apply(res_modas2,1,sum))
# lines(sample_frequency, col = 4)
x <-  c(0,0,0,0,0,0,0,0,0,2,7,14,22,15,13,12,17,22,35,28,7,4,1,0,0,0,0,0,0,0,0)
separar_modas <- function(x, length_class = seq(5, 20, by = 0.5), groups, mu = mu, plot = FALSE){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
sigma  = seq(2, 2+groups-1, by = 1)
pi     = rep(1/groups, groups)
dfPars = data.frame(pi = pi, mu = mu, sigma = sigma)
df     = data.frame(legnth = length_class), freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = dfPars, dist = "norm", print.level = 1)
}, error=function(e){
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(isTRUE(plot)){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
mu = as.numeric()
mu
mixpar
data(pikepar)
pikepar
separar_modas <- function(x, length_class = seq(5, 20, by = 0.5), mixpar, mu = as.numeric(), plot = FALSE){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
mixdat     = data.frame(legnth = length_class, freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = mixpar, dist = "norm", print.level = 1)
}, error=function(e){
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(isTRUE(plot)){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
Bhattacharya2 <- function(x, length_class = seq(5, 20, by = 0.5), mixpar, plot = FALSE){
list.of.packages <- c("mixdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(mixdist)
x[is.na(x)] = 0
mixdat     = data.frame(legnth = length_class, freq = x)
outL = tryCatch({
mix(mixdat = df, mixpar = mixpar, dist = "norm", print.level = 1)
}, error=function(e){
message("Not Converge")
outL <- NULL
return(outL)
})
if(!is.null(outL)){
res_modas2 = fitted(fit1)
res_modas2 = res_modas2$joint
population = sum(res_modas2)
tableBhatt = data.frame(Group = seq_along(outL$parameters$mu), Mean = outL$parameters$mu, Sigma = outL$parameters$sigma, Population = population)
if(isTRUE(plot)){
plot(outL)
}
cohortes <- data.frame(res_modas2)
names(cohortes) <- paste0("cohor",1:ncol(cohortes))
out = list(tableBhatt = tableBhatt, cohortes, outL = outL)
}else{
out = NULL
}
return(out)
}
library(fenix)
library(fenix)
library(fenix)
require(fenix)
tmpAnchNC <- read.csv("temporadas.csv")
tmpAnchNC
save(tmpAnchNC, file = "data/tmpAnchNC.RData")
tmpAnchNC
library(fenix)
library(fenix)
library(fenix)
require(fenix)
mapa_peru()
library(fenix)
library(fenix)
library(fenix)
library(fenix)
read.csv("temporadas.csv")
data <- read.csv("temporadas.csv")
data
require(fenix)
tmpAnchNC
tmpAnchNC <- read.csv("temporadas.csv")
save(tmpAnchNC, file = "data/tmpAnchNC.RData")
tmpAnchNC
library(fenix)
tmpAnchNC
require(fenix)
tmpAnchNC
getwd()
tmpAnchNC <- read.csv("temporadas.csv")
tmpAnchNC
tmpAnchNC <- read.csv("temporadas.csv")
tmpAnchNC
getwd()
save(tmpAnchNC, file = "C:/pablo/D/github/fenix/data/tmpAnchNC.RData")
library(fenix)
tmpAnchNC
require(fenix)
tmpAnchNC
tmpAnchNC <- read.csv("temporadas.csv")
tmpAnchNC
getwd()
save(tmpAnchNC, file = "C:/pablo/D/github/fenix/data/tmpAnchNC.RData")
library(fenix)
tmpAnchNC
library(fenix)
