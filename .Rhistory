if(is.null(outFolder)){
outFolder <- getwd()
}
if(save){
png(filename = file.path(outFolder, outFile), width = widthFig, height = heightFig,
units = "px", res = 130)
}
mapa_peru(area_iso = addIsoAreas)
if(Label){
Barcos = unique(baseDat[, "EMBARCACION"])
baseDat$LanLab = paste0(substr(x = baseDat[, "EMBARCACION"], start = 1, stop = 2), baseDat[, "REO_NNUMLAN"])
baseDat$LanLab1 = paste0(baseDat[, "EMBARCACION"], baseDat[, "REO_NNUMLAN"])
Barcos2 = tolower(Barcos)
Cols = baseBarcoCol$cols[match(Barcos2, baseBarcoCol$barco)]
Cols[which(is.na(Cols))] = baseBarcoCol$cols[which(baseBarcoCol$barco == "otros")] #para lanchas
for(k in seq_along(Barcos)){
tmp2 = baseDat[which(baseDat[, "EMBARCACION"] == Barcos[k]), ]
idx = unique(tmp2$LanLab1)
for(j in seq_along(idx)){
tmp3 = tmp2[which(tmp2[, "LanLab1"] == idx[j]), ]
text(x = tmp3[1, "LONGITUD_INICIAL"], y = tmp3[1, "LATITUD_INICIAL"], labels = tmp3[1, "LanLab"],
col = Cols[k], cex = CexPoint)
}
}
} else {
Barcos = unique(baseDat[, "EMBARCACION"])
Barcos2 = tolower(Barcos)
Cols = baseBarcoCol$cols[match(Barcos2, baseBarcoCol$barco)]
Cols[which(is.na(Cols))] = baseBarcoCol$cols[which(baseBarcoCol$barco == "otros")] #para lanchas
for(k in seq_along(Barcos)){
points(x = baseDat[which(baseDat[, "EMBARCACION"] == Barcos[k]), "LONGITUD_INICIAL"],
y = baseDat[which(baseDat[, "EMBARCACION"] == Barcos[k]), "LATITUD_INICIAL"],
pch = Pch, col = Cols[k], cex = CexPoint)
}
if(Legend){
Barcos3 = data.frame(barc = Barcos2, col1 = Cols)
Barcos3$barc = as.character(Barcos3$barc)
Barcos3$col1 = as.character(Barcos3$col1)
Barcos3$barc[which(Barcos3$barc == "imarpe iv" | Barcos3$barc == "imarpe v" | Barcos3$barc == "imarpe vi")] = "L/P"
uniBarc = c("L/P", "olaya", "humboldt", "flores")
Barcos3$barc[!Barcos3$barc %in% uniBarc] = "E/P"
vs = aggregate(x = Barcos3, by = list(Barcos3$barc,Barcos3$col1), FUN = unique)
legend("bottomleft", legend = toupper(vs$barc), pch = Pch, bty = "n", col = vs$col1, cex = 0.9)
}
}
if(save){
dev.off()
}
}
biom_survey_map_lances(baseDat = dataB, save = F, Legend = F)
baseBarcos <- read.csv("C:/pablo/D/2020/prospeccion20_04/datos/base_Barco_colors.csv")
baseBarcos
getwd()
save(baseBarcos, file = "C:/pablo/D/github/fenix/data/baseBarcos.RData")
biom_survey_map_lances(baseDat = dataB, save = F, Legend = F)
baseBarcosCol <- read.csv("C:/pablo/D/2020/prospeccion20_04/datos/base_Barco_colors.csv")
save(baseBarcosCol, file = "C:/pablo/D/github/fenix/data/baseBarcosCol.RData")
biom_survey_map_lances(baseDat = dataB, save = F, Legend = F)
baseBarcosCol <- read.csv("C:/pablo/D/2020/prospeccion20_04/datos/base_Barco_colors.csv")
save(baseBarcosCol, file = "C:/pablo/D/github/fenix/data/baseBarcosCol.RData")
biom_survey_map_lances(baseDat = dataB, save = F, Legend = F)
baseBarcoCol <- read.csv("C:/pablo/D/2020/prospeccion20_04/datos/base_Barco_colors.csv")
save(baseBarcoCol, file = "C:/pablo/D/github/fenix/data/baseBarcoCol.RData")
biom_survey_map_lances(baseDat = dataB, save = F, Legend = F)
biom_survey_map_lances(baseDat = dataB, save = F)
biom_survey_map_lances(baseDat = dataB, save = F)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
require(fenix)
baseBarcosCol
install.packages("NB")
library(fenix)
require(fenix)
tmpAnchNC
tmpAnchNC <- read.csv("temporadas.csv")
save(tmpAnchNC, file = "data/tmpAnchNC.RData")
tmpAnchNC
tmpAnchNC <- read.csv("temporadas.csv")
save(tmpAnchNC, file = "data/tmpAnchNC.RData")
library(fenix)
tmpAnchNC
require(fenix)
tmpAnchNC
tmpAnchNC <- read.csv("temporadas.csv")
save(tmpAnchNC, file = "data/tmpAnchNC.RData")
tmpAnchNC <- read.csv("temporadas.csv")
tmpAnchNC
save(tmpAnchNC, file = "data/tmpAnchNC.RData")
library(fenix)
setwd("C:/pablo/D/2020/primera_temporada")
require(fenix)
#  ------------------------------------------------------------------------
# OBJETOS DE DIRECTORIO
dir.input = "C:/pablo/D/2020/primera temporada/sisesat/inputs/"
dir.output = "C:/pablo/D/2020/primera temporada/sisesat/outputs/"
setwd(dir.input)
#  ------------------------------------------------------------------------
# OBJETOS DE DIRECTORIO
dir.input = "C:/pablo/D/2020/primera temporada/sisesat/inputs/data"
setwd(dir.input)
#  ------------------------------------------------------------------------
# OBJETOS DE DIRECTORIO
dir.input = "C:/pablo/D/2020/primera_temporada/sisesat/inputs/data"
dir.output = "C:/pablo/D/2020/primera_temporada/sisesat/outputs/"
setwd(dir.input)
dir()
archivos <- dir()
dataSAT  <- <- NULL
dataSAT  <- <- NULL
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i])
dataSAT    <- rbind(dataSAT, dataSatDia)
}
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i])
print(names(dataSatDia))
#dataSAT    <- rbind(dataSAT, dataSatDia)
}
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i])
print(c(names(dataSatDia), i))
#dataSAT    <- rbind(dataSAT, dataSatDia)
}
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i])
print(c(names(dataSatDia), archivos[i]))
#dataSAT    <- rbind(dataSAT, dataSatDia)
}
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i])
MATRICULA <- dataSatDia$MATRICULA
if(length(MATRICULA)<0){
dataSatDia$MAT <- "sin_matricula"
}
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION", "MAT")]
#print(c(names(dataSatDia), archivos[i]))
dataSAT    <- rbind(dataSAT, dataSatDia)
}
seq_along(archivos)
i = 55
dataSatDia <- read.csv(archivos[i])
head(dataSatDia)
dataSatDia <- read.csv(archivos[i], aep = "/t")
dataSatDia <- read.csv(archivos[i], sep = "/t")
dataSatDia <- read.csv(archivos[i], sep = "\t")
dataSatDia
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i], sep = "\t")
MATRICULA <- dataSatDia$MATRICULA
if(length(MATRICULA)<0){
dataSatDia$MAT <- "sin_matricula"
}
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION", "MAT")]
#print(c(names(dataSatDia), archivos[i]))
dataSAT    <- rbind(dataSAT, dataSatDia)
}
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i], sep = "\t")
# MATRICULA <- dataSatDia$MATRICULA
# if(length(MATRICULA)<0){
#   dataSatDia$MAT <- "sin_matricula"
# }
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION")]
#print(c(names(dataSatDia), archivos[i]))
dataSAT    <- rbind(dataSAT, dataSatDia)
}
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i], sep = "\t")
# MATRICULA <- dataSatDia$MATRICULA
# if(length(MATRICULA)<0){
#   dataSatDia$MAT <- "sin_matricula"
# }
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION")]
#print(c(names(dataSatDia), archivos[i]))
dataSAT    <- rbind(dataSAT, dataSatDia2)
}
head(dataSAT)
tmpAnchNC
#  ------------------------------------------------------------------------
# FECHAS TEMPORADA
inicio.temp = as.Date("2020-05-13", format = "%Y-%m-%d")
fin.temp    = as.Date("2019-07-31", format = "%Y-%m-%d")
dataSAT     = dataSAT[dataSAT$Fecha >= inicio.temp & dataSAT$Fecha <= fin.temp, ]
# GENERAR SEMANA
out.semana = estimaSemana2(inicio.temp = inicio.temp, fin.temp = fin.temp)
dataSAT$semana = NA
for(i in sort(unique(dataSAT$Fecha))){
dataSAT[dataSAT$Fecha == i, "semana"] = out.semana[out.semana$diasTemporada == i, "semana"]
#desem[desem$Fecha == i, "semana"] = out.semana[out.semana$diasTemporada == i, "semana"]
}
dataSAT$Fecha
head(dataSAT)
setwd(dir.input)
archivos <- dir()
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i], sep = "\t")
# MATRICULA <- dataSatDia$MATRICULA
# if(length(MATRICULA)<0){
#   dataSatDia$MAT <- "sin_matricula"
# }
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION")]
#print(c(names(dataSatDia), archivos[i]))
dataSAT    <- rbind(dataSAT, dataSatDia2)
}
#  ------------------------------------------------------------------------
# FECHAS TEMPORADA
inicio.temp = as.Date("2020-05-13", format = "%Y-%m-%d")
fin.temp    = as.Date("2019-07-31", format = "%Y-%m-%d")
dataSAT     = dataSAT[dataSAT$Fecha >= inicio.temp & dataSAT$Fecha <= fin.temp, ]
head(dataSAT)
setwd(dir.input)
archivos <- dir()
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i], sep = "\t")
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION")]
dataSAT    <- rbind(dataSAT, dataSatDia2)
}
require(fenix)
require(SISESATools)
#  ------------------------------------------------------------------------
# OBJETOS DE DIRECTORIO
dir.input = "C:/pablo/D/2020/primera_temporada/sisesat/inputs/data"
dir.output = "C:/pablo/D/2020/primera_temporada/sisesat/outputs/"
setwd(dir.input)
archivos <- dir()
dataSAT  <- NULL
for(i in seq_along(archivos)){
dataSatDia <- read.csv(archivos[i], sep = "\t")
dataSatDia2 <- dataSatDia[,c("EMBARCACION","X","Y","DATACION")]
dataSAT    <- rbind(dataSAT, dataSatDia2)
}
get_tallas_lat <- function(data, tallas = seq(5, 20, by = 0.5), tallas_juv = seq(5, 11.5, by = 0.5)){
require(dplyr)
namesVar    <- paste0("X", tallas)
namesVarJuv <- paste0("X", tallas_juv)
TallasSeg  <- tallas
TallasGlat <- lapply(split(data, data$Glat, drop = TRUE), function(x){
x[is.na(x)] <- 0
nobs        <- nrow(x)
if(nobs > 1){
outTallasPon                   <- x[,namesVar]
outTallasPon[outTallasPon > 0] <- 0
for(i in 1:nobs){
outTallasPon[i,] <- fenix::CALfreqPonderada(tallas = TallasSeg, frecuencia = x[i,namesVar], a = 0.0043, b = 3.1803, captura = x$descarga_t[i])
}
outTallasPon       <- apply(outTallasPon, 2, sum, na.rm = T)
}else{
outTallasPon       <- fenix::CALfreqPonderada(tallas = TallasSeg, frecuencia = x[,namesVar], a = 0.0043, b = 3.1803, captura = x$descarga_t)
}
outTallasPon <- as.numeric(outTallasPon)
porJuv       <- sum(outTallasPon[1:14])/sum(outTallasPon)*100
Glat         <- x$Glat[1]
captura      <- sum(x$descarga_t, na.rm = T)
n_viajes     <- nobs
cbind.data.frame(n_viajes, porJuv, Glat, captura, t(outTallasPon))
})
TallasGlat <- TallasGlat %>% lapply(as.data.frame) %>% bind_rows()
TallasGlat <- completar_lat(data = TallasGlat)
return(TallasGlat)
}
library(fenix)
library(fenix)
library(fenix)
library(fenix)
(DataTallas, DataTallasLat)
head(DataTallas)
DataTallasLat   <- TallasSeg_lat(DataTallas)
DataTallasLat   <- TallasSeg_lat(DataTallas)
library(fenix)
TallasSeg_mapaIso(DataTallas, DataTallasLat)
library(fenix)
DataTallasLat
TallasSeg_mapaIso(DataTallas, DataTallasLat)
TallasSeg_mapaIso <-function(DataTallas, DataTallasLat){
require(fields)
scale.color = designer.colors(100, c('blue',
'#007FFF','cyan',
'#7FFF7F','yellow',
'#FF7F00','red'))
layout(matrix(c(1,2), ncol = 2), widths = c(0.6,1))
par(mar = c(2,2,2,0))
TallasSeg_plot(DataTallasLat, ylim = c(-21, -2))
par(mar = c(2,0,2,0.5))
TallasSeg_map_int(xlim = c(-82,-70), ylim = c(-21, -3))
tmp_isoareas = isopara$area %in% unique(DataTallas$area)
tmp_isopara = isopara[tmp_isoareas, ]
idx_areas = unique(tmp_isopara$area)
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = DataTallas, subset = DataTallas$area == idx_areas[i])
captura_area = round(sum(temp_data$captura, na.rm = T))
captura_area[captura_area <= 2] <- 2
polygon(x = c(temp$lon[1], temp$lon[2:nrow(temp)], temp$lon[1]),
y = c(temp$lat[1], temp$lat[2:nrow(temp)], temp$lat[1]),
border = 1, col = scale.color[captura_area])
}
require(geoR)
legend.krige(c(-81,-80.5),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1)
text(x = -80.9, y = -12.2, labels = "Captura \n(miles t)")
legend("toprigh",
legend = "", bty = "n", cex = 1.4)
return(invisible())
}
completar_lat <- function(data, ...){
data_new <- data.frame(matrix(NA, ncol = 4, nrow = length(3:21)))
data_new[is.na(data_new)] <- 0
names(data_new) <- names(data)[1:4]
data_new[,"Glat"] <- 3:21
data_new <- merge(data_new, data, by = "Glat", all = T)
data_new[is.na(data_new)] <- 0
data_new <- data_new[,-c(2:4)]
return(data_new)
}
TallasSeg_mapaIso(DataTallas, DataTallasLat)
library(fenix)
TallasSeg_mapaIso(DataTallas, DataTallasLat)
TallasSeg_mapaIso(DataTallas, DataTallasLat)
library(fenix)
TallasSeg_mapaIso(DataTallas, DataTallasLat)
library(fenix)
require(fenix)
fenix
require(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
?bin_length
library(fenix)
library(fenix)
library(fenix)
library(fenix)
require(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
alk_jurel
freq_jurel
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
alk_jurel
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
alk_jurel
freq_jurel
data_alk = alk_jurel[,-1]
apply(data_alk,1, sum)
data_alk/apply(data_alk,1, sum)
data_prop = data_alk/apply(data_alk,1, sum)
data_prop
data_prop[is.na(data_prop)]
data_prop[is.na(data_prop)] = 0
data_prop
freq_jurel
freq_jurel[,-1]
data_freq
data_freq = freq_jurel[,-1]
ncol(data_freq)
i = 1
data_freq[,i]*data_prop
matrix(data_freq[,i], nrow = 1)
data_prop
ncol(data_prop)
matrix(data_freq[,i], nrow = 1)*matrix(data_prop, ncol = ncol(data_prop))
matrix(data_freq[,i], nrow = 1)**matrix(data_prop, ncol = ncol(data_prop))
matrix(data_freq[,i], nrow = 1)%*%matrix(data_prop, ncol = ncol(data_prop))
dim(matrix(data_freq[,i], nrow = 1))
dim(matrix(data_prop, ncol = ncol(data_prop)))
matrix(data_prop, ncol = ncol(data_prop)
matrix(data_prop, ncol = ncol(data_prop))
data_prop
ncol(data_prop)
nrow(data_prop)
matrix(data_prop, ncol = ncol(data_prop), nrow = nrow(data_prop))
dim(data_prop)
ncol(data_prop)
matrix(data_freq[,i], nrow = 1)%*%matrix(data = data_prop, ncol = nrow(data_prop), nrow = ncol(data_prop))
matrix(data = data_prop, ncol = nrow(data_prop), nrow = ncol(data_prop))
data_prop
as.matrix(data_prop)
matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
age = 1:12
matrix_age = data.frame(age = age)
matrix_age
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = data.frame(age = age)
for(i in 1:ncol(data_freq)){
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = cbind(matrix_age, out)
}
matrix_age
out
matrix_age = data.frame(age = age)
for(i in 1:ncol(data_freq)){
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = cbind(matrix_age, t(out))
}
out
matrix(data_freq[,i], nrow = 1)
as.matrix(data_prop)
age = 0:12
data_prop = data_alk/apply(data_alk,1, sum)
data_prop[is.na(data_prop)] = 0
matrix_age = data.frame(age = age)
for(i in 1:ncol(data_freq)){
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = cbind(matrix_age, t(out))
}
matrix_age
data_freq
names(matrix_age)
data_freq
names(matrix_age) = c("age", names(data_freq))
matrix_age
data_alk
data_freq
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
ALK = alk_jurel[,-1]
FREQ = freq_jurel[,-1]
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
return(datAGE)
}
get_age_dist()
get_age_dist(ALK, FREQ, AGE = 0:12)
name.row(names)
name.row(datAGE)
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
name.row(datAGE) = NULL
return(datAGE)
}
get_age_dist(ALK, FREQ, AGE = 0:12)
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
names.row(datAGE) = NULL
return(datAGE)
}
get_age_dist(ALK, FREQ, AGE = 0:12)
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
row.names(datAGE) = NULL
return(datAGE)
}
get_age_dist(ALK, FREQ, AGE = 0:12)
output = get_age_dist(ALK, FREQ, AGE = 0:12)
sum(output$quarter_1)
sum(freq_jurel$quarter_1)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
require(fenix)
library(fenix)
require(fenix)
modas
library(fenix)
library(fenix)
library(fenix)
