?bin_length
library(fenix)
library(fenix)
library(fenix)
library(fenix)
require(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
alk_jurel
freq_jurel
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
alk_jurel
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
alk_jurel
freq_jurel
data_alk = alk_jurel[,-1]
apply(data_alk,1, sum)
data_alk/apply(data_alk,1, sum)
data_prop = data_alk/apply(data_alk,1, sum)
data_prop
data_prop[is.na(data_prop)]
data_prop[is.na(data_prop)] = 0
data_prop
freq_jurel
freq_jurel[,-1]
data_freq
data_freq = freq_jurel[,-1]
ncol(data_freq)
i = 1
data_freq[,i]*data_prop
matrix(data_freq[,i], nrow = 1)
data_prop
ncol(data_prop)
matrix(data_freq[,i], nrow = 1)*matrix(data_prop, ncol = ncol(data_prop))
matrix(data_freq[,i], nrow = 1)**matrix(data_prop, ncol = ncol(data_prop))
matrix(data_freq[,i], nrow = 1)%*%matrix(data_prop, ncol = ncol(data_prop))
dim(matrix(data_freq[,i], nrow = 1))
dim(matrix(data_prop, ncol = ncol(data_prop)))
matrix(data_prop, ncol = ncol(data_prop)
matrix(data_prop, ncol = ncol(data_prop))
data_prop
ncol(data_prop)
nrow(data_prop)
matrix(data_prop, ncol = ncol(data_prop), nrow = nrow(data_prop))
dim(data_prop)
ncol(data_prop)
matrix(data_freq[,i], nrow = 1)%*%matrix(data = data_prop, ncol = nrow(data_prop), nrow = ncol(data_prop))
matrix(data = data_prop, ncol = nrow(data_prop), nrow = ncol(data_prop))
data_prop
as.matrix(data_prop)
matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
age = 1:12
matrix_age = data.frame(age = age)
matrix_age
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = data.frame(age = age)
for(i in 1:ncol(data_freq)){
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = cbind(matrix_age, out)
}
matrix_age
out
matrix_age = data.frame(age = age)
for(i in 1:ncol(data_freq)){
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = cbind(matrix_age, t(out))
}
out
matrix(data_freq[,i], nrow = 1)
as.matrix(data_prop)
age = 0:12
data_prop = data_alk/apply(data_alk,1, sum)
data_prop[is.na(data_prop)] = 0
matrix_age = data.frame(age = age)
for(i in 1:ncol(data_freq)){
out = matrix(data_freq[,i], nrow = 1)%*%as.matrix(data_prop)
matrix_age = cbind(matrix_age, t(out))
}
matrix_age
data_freq
names(matrix_age)
data_freq
names(matrix_age) = c("age", names(data_freq))
matrix_age
data_alk
data_freq
alk_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/alk_jurel.csv")
freq_jurel = read.csv("C:/pablo/D/trabajos/sarda_chilensis/Tallas/data/freq_jurel.csv")
ALK = alk_jurel[,-1]
FREQ = freq_jurel[,-1]
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
return(datAGE)
}
get_age_dist()
get_age_dist(ALK, FREQ, AGE = 0:12)
name.row(names)
name.row(datAGE)
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
name.row(datAGE) = NULL
return(datAGE)
}
get_age_dist(ALK, FREQ, AGE = 0:12)
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
names.row(datAGE) = NULL
return(datAGE)
}
get_age_dist(ALK, FREQ, AGE = 0:12)
get_age_dist <- function(ALK = ALK, FREQ = FREQ, AGE = 0:12){
PROP = ALK/apply(ALK,1, sum)
PROP[is.na(PROP)] = 0
datAGE = data.frame(AGE = AGE)
for(i in 1:ncol(FREQ)){
OUT = matrix(FREQ[,i], nrow = 1)%*%as.matrix(PROP)
datAGE = cbind(datAGE, t(OUT))
}
names(datAGE) = c("age", names(FREQ))
row.names(datAGE) = NULL
return(datAGE)
}
get_age_dist(ALK, FREQ, AGE = 0:12)
output = get_age_dist(ALK, FREQ, AGE = 0:12)
sum(output$quarter_1)
sum(freq_jurel$quarter_1)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
require(fenix)
library(fenix)
require(fenix)
modas
library(fenix)
library(fenix)
library(fenix)
escalaColores2 = read.csv("D:/2023/Evaluacion/Anchoveta NC/verano/Cr202302-04/Data/escala_colores_modas2.csv")
escalaColores2 = read.csv("D:/2023/Evaluacion/Anchoveta NC/verano/Cr202302-04/Data/escala_colores_modas2.csv")
escalaColores2
escalaColores2 = read.csv("D:/2023/Evaluacion/Anchoveta NC/verano/Cr202302-04/Data/escala_colores_modas2.csv", sep = ";")
escalaColores2
getwd()
save(escalaColores2, file = "C:/pablo/github/fenix/data/escalaColores2.RData")
library(fenix)
require(fenix)
escalaColores2
library(fenix)
library(fenix)
biom_survey_map_modas_cohortes
requirefenix
require(fenix)
head(points_fishing)
points_fishing$week <- get_week(points_fishing$date)
label_week <- rangeWeek(points_fishing$date, points_fishing$week)
n = -3
space = (0:(length(unique(points_fishing$week))-1))*n
points_fishing0 = points_fishing
for(i in 1:length(unique(points_fishing0$week))){
points_fishing0[points_fishing0$week == sort(unique(points_fishing0$week))[i],"lon"] = points_fishing0[points_fishing0$week == sort(unique(points_fishing0$week))[i],"lon"] + space[i]
}
n_perfil <-  length(unique(points_fishing$week))
mapa_peru(n_perfil = n_perfil)
for(i in 1:length(space)){
lines(linePeru$lon + space[i], linePeru$lat, col = "gray45")
text(x = -72 + space[i], y = -19, labels = label_week[i], cex = 0.6)
}
points(points_fishing0$lon, points_fishing0$lat, cex = 0.8, col = 4, pch = 16)
mapa_peru(area_iso = T, name_area_iso = c(12180, 13180))
cCPUE = function(data, variable, Catp.max = 135.3913){
out = tapply(data[[variable]], data[["AREA"]], mean, na.rm = T)
outx = as.numeric(out)
outx[is.na(outx)] = 0
outx = round((outx/Catp.max)*100)
if(outx > 100) outx = 100
if(outx %in% 0) outx = 1
return(outx)
}
dim(points_fishing)
head(points_fishing)
points_fishing$dc = estima_dc(x = points_fishing$lon,y = points_fishing$lat)
points_fishing$dc
area_isoparalitoral(dist_costa = ,latitude = points_fishing$lat)
area_isoparalitoral(dist_costa = points_fishing$dc ,latitude = points_fishing$lat)
area = area_isoparalitoral(dist_costa = points_fishing$dc ,latitude = points_fishing$lat)
points_fishing$area = area$area
points_fishing$area
head(points_fishing)
points_fishing$area
points_fishing = points_fishing[!is.na(points_fishing$area),]
summary(points_fishing)
head8points_fishing
points_fishing(points_fishing)
head(points_fishing)
mapa.peru(xlim = c(-102,-70))
mapa_peru(xlim = c(-102,-70))
unique(points_fishing$week)
sort(unique(points_fishing$week))
bitacora = points_fishing[points_fishing$week == j,]
j = 1
bitacora = points_fishing[points_fishing$week == j,]
head(bitacora)
sort(unique(points_fishing$week))
n_perfil = length(sort(unique(points_fishing$week)))
n_perfil
mapa_peru(n_perfil = n_perfil)
isopara
dataj = points_fishing[points_fishing$week == j,]
tmp_isoareas = isopara$area %in% dataj$area
tmp_isoareas
tmp_isopara = isopara[tmp_isoareas, ]
tmp_isopara
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
tmp_isopara$area
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
idx_areas = unique(tmp_isopara$area)
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
temp_data
temp_data
scale.color
temp_data
tapply(temp_data$lon, temp_data$area, length)
colorVariable = tapply(temp_data$lon, temp_data$area, length)
for(j in sort(unique(points_fishing$week))){
dataj = points_fishing[points_fishing$week == j,]
#lines(shoreline$V1 + scale[j], shoreline$V2, col = "gray")
#text(x = xw + scale[j], y = ys, y[j], cex = 0.8)
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara = isopara[tmp_isoareas, ]
idx_areas = unique(tmp_isopara$area)
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
#CPUEarea = cCPUE(data = temp_data, variable = "CPUEsar",Catp.max = 50)
#print(CPUEarea)
#    if(CPUEarea == 0) { CPUEarea = 0.01 }
polygon(x = c(temp$lon[1]+scale[j], temp$lon[2:nrow(temp)]+scale[j], temp$lon[1]+scale[j]),
y = c(temp$lat[1], temp$lat[2:nrow(temp)], temp$lat[1]),
border = scale.color[colorVariable], col = scale.color[colorVariable])
}
require(geoR)
legend.krige(c(-100.5,-100),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
# legend("toprigh", c("SARDINA","Distribuci?n espacial \n de la Captura"),
#        bty = "n")
}
scale
scale = 0:length(sort(unique(points_fishing$week)))*-3
scale
mapa_peru(n_perfil = n_perfil)
for(j in sort(unique(points_fishing$week))){
dataj = points_fishing[points_fishing$week == j,]
#lines(shoreline$V1 + scale[j], shoreline$V2, col = "gray")
#text(x = xw + scale[j], y = ys, y[j], cex = 0.8)
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara = isopara[tmp_isoareas, ]
idx_areas = unique(tmp_isopara$area)
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
#CPUEarea = cCPUE(data = temp_data, variable = "CPUEsar",Catp.max = 50)
#print(CPUEarea)
#    if(CPUEarea == 0) { CPUEarea = 0.01 }
polygon(x = c(temp$lon[1]+scale[j], temp$lon[2:nrow(temp)]+scale[j], temp$lon[1]+scale[j]),
y = c(temp$lat[1], temp$lat[2:nrow(temp)], temp$lat[1]),
border = scale.color[colorVariable], col = scale.color[colorVariable])
}
require(geoR)
legend.krige(c(-100.5,-100),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
# legend("toprigh", c("SARDINA","Distribuci?n espacial \n de la Captura"),
#        bty = "n")
}
scale.color = designer.colors(100, c('#00007F','blue',
'#007FFF','cyan',
'#7FFF7F','yellow',
'#FF7F00','red','#7F0000'))
mapa_peru(n_perfil = n_perfil)
for(j in sort(unique(points_fishing$week))){
dataj = points_fishing[points_fishing$week == j,]
#lines(shoreline$V1 + scale[j], shoreline$V2, col = "gray")
#text(x = xw + scale[j], y = ys, y[j], cex = 0.8)
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara = isopara[tmp_isoareas, ]
idx_areas = unique(tmp_isopara$area)
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
#CPUEarea = cCPUE(data = temp_data, variable = "CPUEsar",Catp.max = 50)
#print(CPUEarea)
#    if(CPUEarea == 0) { CPUEarea = 0.01 }
polygon(x = c(temp$lon[1]+scale[j], temp$lon[2:nrow(temp)]+scale[j], temp$lon[1]+scale[j]),
y = c(temp$lat[1], temp$lat[2:nrow(temp)], temp$lat[1]),
border = scale.color[colorVariable], col = scale.color[colorVariable])
}
require(geoR)
legend.krige(c(-100.5,-100),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
# legend("toprigh", c("SARDINA","Distribuci?n espacial \n de la Captura"),
#        bty = "n")
}
legend.krige(c(-100.5,-100),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
legend("toprigh", c("SARDINA","Distribuci?n espacial \n de la Captura"),
bty = "n")
scale
-85-15
scale[length(scale)]
scale[length(scale)]-85
scale[length(scale)]-75
scale[length(scale)]-80
legend.krige(c(scale[length(scale)]-80,scale[length(scale)]-79.5),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
scale.color
legend.krige(c(scale[length(scale)]-80,scale[length(scale)]-79.5),c(-20,-13),
1:200, vertical=T, col=scale.color, offset.leg = 1.5)
legend.krige(c(scale[length(scale)]-81,scale[length(scale)]-80.5),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
n_perfil = length(sort(unique(points_fishing$week)))
mapa_peru(n_perfil = n_perfil)
for(j in sort(unique(points_fishing$week))){
dataj        = points_fishing[points_fishing$week == j,]
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara  = isopara[tmp_isoareas, ]
idx_areas    = unique(tmp_isopara$area)
maxVariable = NULL
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
polygon(x = c(temp$lon[1]+scale[j], temp$lon[2:nrow(temp)]+scale[j], temp$lon[1]+scale[j]),
y = c(temp$lat[1], temp$lat[2:nrow(temp)], temp$lat[1]),
border = scale.color[colorVariable], col = scale.color[colorVariable])
maxVariable = c(max(colorVariable), maxVariable)
}
require(geoR)
legend.krige(c(scale[length(scale)]-81,scale[length(scale)]-80.5),c(-20,-13),
1:100, vertical=T, col=scale.color, offset.leg = 1.5)
}
maxVariable
max(maxVariable)
idx_areas
colorVariable = tapply(temp_data$lon, temp_data$area, length)
colorVariable
maxVariable = NULL
for(j in sort(unique(points_fishing$week))){
dataj        = points_fishing[points_fishing$week == j,]
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara  = isopara[tmp_isoareas, ]
idx_areas    = unique(tmp_isopara$area)
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
}
maxVariable = c(max(colorVariable), maxVariable)
}
maxVariable
maxVariable = NULL
for(j in sort(unique(points_fishing$week))){
dataj        = points_fishing[points_fishing$week == j,]
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara  = isopara[tmp_isoareas, ]
idx_areas    = unique(tmp_isopara$area)
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
}
maxVariable = c(max(colorVariable), maxVariable)
}
maxVariable
maxVar = NULL
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
maxVar = c(max(colorVariable), maxVar)
}
maxVar
maxAll = NULL
for(j in sort(unique(points_fishing$week))){
dataj        = points_fishing[points_fishing$week == j,]
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara  = isopara[tmp_isoareas, ]
idx_areas    = unique(tmp_isopara$area)
maxVar = NULL
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = tapply(temp_data$lon, temp_data$area, length)
maxVar = c(max(colorVariable), maxVar)
}
maxAll = c(max(maxVar), maxAll)
}
maxAll
valorMax = max(maxAll)
valorMax
n_perfil = length(sort(unique(points_fishing$week)))
mapa_peru(n_perfil = n_perfil)
max_valor   = max(maxAll)
scale.color = designer.colors(max_valor, c('#00007F','blue',
'#007FFF','cyan',
'#7FFF7F','yellow',
'#FF7F00','red','#7F0000'))
n_perfil = length(sort(unique(points_fishing$week)))
mapa_peru(n_perfil = n_perfil)
colorVariable
colorVariable = as.numeric(tapply(temp_data$lon, temp_data$area, length))
n_perfil = length(sort(unique(points_fishing$week)))
mapa_peru(n_perfil = n_perfil)
for(j in sort(unique(points_fishing$week))){
dataj        = points_fishing[points_fishing$week == j,]
tmp_isoareas = isopara$area %in% dataj$area
tmp_isopara  = isopara[tmp_isoareas, ]
idx_areas    = unique(tmp_isopara$area)
maxVariable = NULL
for(i in seq_along(idx_areas)){
temp = subset(x = tmp_isopara, subset = tmp_isopara$area == idx_areas[i])
temp_data = subset(x = dataj, subset = dataj$area == idx_areas[i])
colorVariable = as.numeric(tapply(temp_data$lon, temp_data$area, length))
polygon(x = c(temp$lon[1]+scale[j], temp$lon[2:nrow(temp)]+scale[j], temp$lon[1]+scale[j]),
y = c(temp$lat[1], temp$lat[2:nrow(temp)], temp$lat[1]),
border = scale.color[colorVariable], col = scale.color[colorVariable])
maxVariable = c(max(colorVariable), maxVariable)
}
require(geoR)
legend.krige(c(scale[length(scale)]-81,scale[length(scale)]-80.5),c(-20,-13),
1:max_valor, vertical=T, col=scale.color, offset.leg = 1.5)
}
max_valor   = max(maxAll)
scale.color = designer.colors(max_valor, c('#00007F','bluelight',
'#007FFF','cyan',
'#7FFF7F','yellow',
'#FF7F00','red','#7F0000'))
points_fishing$dc   = estima_dc(x = points_fishing$lon,y = points_fishing$lat)
library(fenix)
library(fenix)
library(fenix)
library(fenix)
mapa_peru()
library(fenix)
library(fenix)
library(fenix)
require(fenix)
require(fenix)
estima_dc2
require(fenix)
library(fenix)
library(fenix)
estima_dc2
dc <- estima_dc2(lon = longitude, lat = latitude, polygon = PERU_SP)
dc <- estima_dc2(lon = -85, lat = -6, polygon = PERU_SP)
dc
dc
dc <- estima_dc2(lon = -75, lat = -6, polygon = PERU_SP)
dc
dc <- estima_dc2(lon = -78, lat = -6, polygon = PERU_SP)
dc
dc <- estima_dc2(lon = -81, lat = -6, polygon = PERU_SP)
dc
dc <- estima_dc2(lon = -81, lat = -10, polygon = PERU_SP)
dc
library(fenix)
install.packages("viridisLite")
install.packages("viridisLite")
library(fenix)
require(viridisLite)
library(fenix)
require(fenix)
biom_survey_dist_tallaslance
